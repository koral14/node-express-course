1. In this lesson, you created a middleware function called asyncWrapper. Why?
- The asyncWrapper middleware function was created to refactor and the code so we would not the same code multiple times (the try and catch block that is used for each method) but instead would call the middleware function.

2. Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(getSingleItemCustomError(`No task with the id: ${taskID}`, 404))
  }
  res.status(200).json({ task });
});